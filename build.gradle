//querydsl
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //faker
    implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    //test faker
    implementation 'net.datafaker:datafaker:1.5.0'
    testImplementation 'net.datafaker:datafaker:1.5.0'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    //springSecurity
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //spring data redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //테스트 환경에서 사용하기 위한 embedded redis
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.1'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-sql-spring:${queryDslVersion}"
    implementation "com.querydsl:querydsl-sql:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    //JUnit4 추가
    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }

    //swagger
    //implementation 'io.springfox:springfox-swagger2:2.9.2'
    //implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'

    implementation 'mysql:mysql-connector-java:8.0.32'

    //테스트 코드에서 롬복 가능하게
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //devtools 추가
    compileOnly 'org.springframework.boot:spring-boot-devtools:2.7.1'

    //log관련하여 ExceptionLogConverter에서 StringUtils를 사용하기 위해 추가하였음.
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //redisson
    implementation group: 'org.redisson', name: 'redisson-spring-boot-starter', version: '3.19.3'

    //MySQL log
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    //Mockito
    testImplementation 'org.mockito:mockito-core:3.12.4'

    //Elasticsearch
//    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch:2.7.8'
//    implementation 'org.springframework.data:spring-data-elasticsearch:4.4.7'
//    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.9'

    //redis test-container
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'

    //spring-actuator + prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled true
    }

    def Qdomains = []

    for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    // 여기부터
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: ['**/repository','**/event/**','**/model','**/dto','**/jwt',
                                                 '**/security','**/response','**/entity','**/exception','**/facade','**/view/**'
                                                 ,'**/config','**/test/**','**/StressTrafficSystemApplication.class',
                                                 '**/redis'] + Qdomains)
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
            }

            excludes = [] + Qdomains // 제외할 Qdomains 패턴 추가
        }
    }
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝